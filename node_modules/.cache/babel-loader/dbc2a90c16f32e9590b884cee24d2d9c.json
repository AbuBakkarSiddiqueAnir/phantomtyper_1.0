{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anird\\\\Desktop\\\\phantomTyper\\\\phantomtyper_1.0\\\\src\\\\helper\\\\helper.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst helperMethods = {\n  randomParagraphSelector: list => {\n    return list[Math.floor(Math.random() * list.length)];\n  },\n  paragraphSlicer: (paragraph, SLICER_INDEX) => {\n    return [paragraph.slice(SLICER_INDEX, SLICER_INDEX + 46), SLICER_INDEX + 46];\n  },\n  wordMatchChecker: (firstWord, secondWord) => {\n    if (firstWord) return firstWord.props.children[0].replace(/\\s+/g, \"\") === secondWord.replace(/\\s+/g, \"\");\n    return false;\n  },\n  paragraphArraySetter: (cb_setter, cb_selector, texts) => {\n    cb_setter(cb_selector(texts).split(\" \").map((word, index) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [word, \" \", \"\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this);\n    }));\n  },\n  dataBuilder: ({\n    user,\n    TIMER_STARTED_BOOLEAN,\n    setTIMER_STARTED_BOOLEAN,\n    setUSER_STAT,\n    setCHAR_CODES_ARRAY,\n    setMOMENTS_ARRAY,\n    setCHART_IS_OPEN,\n    setTIMER_TRACKER_BOOLEAN\n  }) => {\n    if (TIMER_STARTED_BOOLEAN) setTIMER_TRACKER_BOOLEAN(true);\n    setTIMER_STARTED_BOOLEAN(false);\n    let sumOfAccuracy = 0,\n        avgAccuracy,\n        sumOfCorrect = 0,\n        avgCorrect,\n        sumOfKeyStrokes = 0,\n        avgKeystrokes,\n        sumOfWpm = 0,\n        avgWpm,\n        sumOfMisspelled = 0,\n        avgMisspelled,\n        arrayOfCharCodes = [],\n        arrayOfAllCharCodes = [],\n        avgMomentsArrayOfAllCharCodes = [],\n        uniqueCharCodeArray = [],\n        momentsArr = [],\n        charCodesArr = [];\n    user.userdata.map(datam => {\n      sumOfAccuracy += datam.ACCURACY;\n      sumOfCorrect += datam.CORRECT;\n      sumOfKeyStrokes += datam.KEY_STROKES;\n      sumOfWpm += datam.WPM;\n      sumOfMisspelled += datam.MISSPELLED;\n      arrayOfCharCodes = [...arrayOfCharCodes, datam.CHAR_CODES];\n    });\n    avgAccuracy = sumOfAccuracy / user.userdata.length;\n    avgCorrect = sumOfCorrect / user.userdata.length;\n    avgMisspelled = sumOfMisspelled / user.userdata.length;\n    avgKeystrokes = sumOfKeyStrokes / user.userdata.length;\n    avgWpm = sumOfWpm / user.userdata.length;\n    setUSER_STAT({\n      avgKeystrokes,\n      avgCorrect,\n      avgWpm,\n      avgMisspelled,\n      avgAccuracy\n    });\n    console.log(arrayOfCharCodes);\n    arrayOfCharCodes.map(arr => {\n      arr.map(momentObj => {\n        arrayOfAllCharCodes.push(momentObj);\n      });\n    });\n    arrayOfAllCharCodes.map(momentObj => {\n      uniqueCharCodeArray.push(momentObj.charCode);\n    });\n    uniqueCharCodeArray = [...new Set(uniqueCharCodeArray)];\n    uniqueCharCodeArray.map(charCode => {\n      let sumOfMoments = 0,\n          charCounts = 0;\n      arrayOfAllCharCodes.map(momentObj => {\n        if (charCode === momentObj.charCode) {\n          charCounts++;\n          sumOfMoments += momentObj.moment;\n        }\n      });\n      avgMomentsArrayOfAllCharCodes.push({\n        charCode: charCode,\n        avgMoment: Math.ceil(sumOfMoments / charCounts)\n      });\n    });\n    avgMomentsArrayOfAllCharCodes.sort((a, b) => {\n      return a.charCode - b.charCode;\n    });\n    avgMomentsArrayOfAllCharCodes.map(momentObj => {\n      momentsArr.push(momentObj.avgMoment);\n\n      if (momentObj.charCode === 32) {\n        charCodesArr.push(\"space\");\n      } else {\n        charCodesArr.push(String.fromCharCode(momentObj.charCode));\n      }\n    });\n    setMOMENTS_ARRAY(momentsArr);\n    setCHAR_CODES_ARRAY(charCodesArr);\n    setCHART_IS_OPEN(true);\n  },\n  deleteUser: (user, cb_users) => {\n    let userPermission = prompt(\"To delete your statistics, type 'yes'.\");\n\n    if (userPermission === \"yes\") {\n      let prevUsersData = [...JSON.parse(localStorage.getItem(\"usersData\"))];\n      let newUsersData = [];\n      prevUsersData.map((userObj, index) => {\n        if (user.username === userObj.username) {\n          return;\n        }\n\n        newUsersData.push(userObj);\n      });\n      cb_users(newUsersData);\n      localStorage.setItem(\"usersData\", JSON.stringify(newUsersData));\n    }\n  },\n  keyPress: (match_checker, {\n    event,\n    CORRECT,\n    MISSPELLED,\n    CHAR_CODES,\n    SELECTED_WORD,\n    TYPING_WORD,\n    WORD_BOOLEANS,\n    PREV_MOMENT,\n    WORD_INDEX,\n    PARAGRAPH_ARRAY,\n    setWORD_INDEX,\n    ChallengeRestartButtonHandler,\n    setMISSPELLED,\n    setCORRECT,\n    setTYPING_WORD,\n    setWORD_BOOLEANS,\n    setACCURACY,\n    setSELECTED_WORD,\n    setKEY_STROKES,\n    setTIMER_STARTED_BOOLEAN,\n    setCHAR_CODES,\n    setPREV_MOMENT\n  }) => {\n    setKEY_STROKES((prevStroke, currStroke) => {\n      return prevStroke + 1;\n    });\n    setTIMER_STARTED_BOOLEAN(true);\n\n    if (PREV_MOMENT > 1) {\n      setCHAR_CODES([...CHAR_CODES, {\n        moment: new Date().getTime() - PREV_MOMENT,\n        charCode: event.charCode\n      }]);\n      setPREV_MOMENT(0);\n    }\n\n    setPREV_MOMENT(new Date().getTime());\n\n    if (event.charCode === 32) {\n      setWORD_INDEX((prevIndex, currnetIndex) => prevIndex + 1);\n      setTIMER_STARTED_BOOLEAN(true);\n      setTYPING_WORD(\"\");\n      setSELECTED_WORD(PARAGRAPH_ARRAY[WORD_INDEX + 1]);\n      setACCURACY((prevAcc, nextAcc) => {\n        if (CORRECT > 0) {\n          let total = parseInt(MISSPELLED) + parseInt(CORRECT);\n          return Math.ceil(parseInt(CORRECT) / total * 100);\n        } else return 0;\n      });\n      let matchingIssues = match_checker(SELECTED_WORD, TYPING_WORD);\n      setWORD_BOOLEANS([...WORD_BOOLEANS, matchingIssues]);\n      if (matchingIssues) setCORRECT((prevCorrect, nextCorrect) => nextCorrect = prevCorrect + 1);else setMISSPELLED((prevMisspelled, nextMisspelled) => {\n        return prevMisspelled + 1;\n      });\n      if (PARAGRAPH_ARRAY.length - 2 < WORD_INDEX) ChallengeRestartButtonHandler();\n    }\n  },\n  characterMatch: ({\n    event,\n    SELECTED_WORD,\n    setTYPING_WORD,\n    setCHARACTER_BOOLEAN\n  }) => {\n    setTYPING_WORD(event.target.value);\n\n    if (SELECTED_WORD) {\n      let char1 = SELECTED_WORD.props.children[0];\n      let char2 = event.target.value.replace(/\\s+/g, \"\");\n\n      if (char2 !== char1.substring(0, char2.length)) {\n        setCHARACTER_BOOLEAN(false);\n      } else {\n        setCHARACTER_BOOLEAN(true);\n      }\n    }\n  },\n  cardMaker: ({\n    setRESULT_CARD_BOOLEAN,\n    setUSERS_DATA,\n    CORRECT,\n    KEY_STROKES,\n    WPM,\n    ACCURACY,\n    MISSPELLED,\n    USER_NAME_FROM_INPUT,\n    setUSER_DATA,\n    CHAR_CODES,\n    USERS_DATA\n  }) => {\n    setRESULT_CARD_BOOLEAN(true);\n    let newUserBool = true;\n    let currentUsersData;\n    let usersDataCopied = [...USERS_DATA];\n\n    if (usersDataCopied.length > 0) {\n      currentUsersData = usersDataCopied.map((user, index) => {\n        if (user.username === USER_NAME_FROM_INPUT) {\n          newUserBool = false;\n          user.userdata.push({\n            CORRECT,\n            KEY_STROKES,\n            WPM,\n            ACCURACY,\n            MISSPELLED,\n            CHAR_CODES\n          });\n          return user;\n        }\n\n        return user;\n      });\n      setUSERS_DATA(currentUsersData);\n    }\n\n    if (newUserBool) {\n      currentUsersData = [...usersDataCopied, {\n        username: USER_NAME_FROM_INPUT,\n        userdata: [{\n          CORRECT,\n          KEY_STROKES,\n          WPM,\n          ACCURACY,\n          MISSPELLED,\n          CHAR_CODES\n        }]\n      }];\n      setUSERS_DATA(currentUsersData);\n    }\n\n    localStorage.setItem(\"usersData\", JSON.stringify(currentUsersData));\n    setUSER_DATA({\n      CORRECT,\n      KEY_STROKES,\n      WPM,\n      ACCURACY,\n      MISSPELLED\n    });\n  }\n};\nexport default helperMethods;","map":{"version":3,"sources":["C:/Users/anird/Desktop/phantomTyper/phantomtyper_1.0/src/helper/helper.js"],"names":["helperMethods","randomParagraphSelector","list","Math","floor","random","length","paragraphSlicer","paragraph","SLICER_INDEX","slice","wordMatchChecker","firstWord","secondWord","props","children","replace","paragraphArraySetter","cb_setter","cb_selector","texts","split","map","word","index","dataBuilder","user","TIMER_STARTED_BOOLEAN","setTIMER_STARTED_BOOLEAN","setUSER_STAT","setCHAR_CODES_ARRAY","setMOMENTS_ARRAY","setCHART_IS_OPEN","setTIMER_TRACKER_BOOLEAN","sumOfAccuracy","avgAccuracy","sumOfCorrect","avgCorrect","sumOfKeyStrokes","avgKeystrokes","sumOfWpm","avgWpm","sumOfMisspelled","avgMisspelled","arrayOfCharCodes","arrayOfAllCharCodes","avgMomentsArrayOfAllCharCodes","uniqueCharCodeArray","momentsArr","charCodesArr","userdata","datam","ACCURACY","CORRECT","KEY_STROKES","WPM","MISSPELLED","CHAR_CODES","console","log","arr","momentObj","push","charCode","Set","sumOfMoments","charCounts","moment","avgMoment","ceil","sort","a","b","String","fromCharCode","deleteUser","cb_users","userPermission","prompt","prevUsersData","JSON","parse","localStorage","getItem","newUsersData","userObj","username","setItem","stringify","keyPress","match_checker","event","SELECTED_WORD","TYPING_WORD","WORD_BOOLEANS","PREV_MOMENT","WORD_INDEX","PARAGRAPH_ARRAY","setWORD_INDEX","ChallengeRestartButtonHandler","setMISSPELLED","setCORRECT","setTYPING_WORD","setWORD_BOOLEANS","setACCURACY","setSELECTED_WORD","setKEY_STROKES","setCHAR_CODES","setPREV_MOMENT","prevStroke","currStroke","Date","getTime","prevIndex","currnetIndex","prevAcc","nextAcc","total","parseInt","matchingIssues","prevCorrect","nextCorrect","prevMisspelled","nextMisspelled","characterMatch","setCHARACTER_BOOLEAN","target","value","char1","char2","substring","cardMaker","setRESULT_CARD_BOOLEAN","setUSERS_DATA","USER_NAME_FROM_INPUT","setUSER_DATA","USERS_DATA","newUserBool","currentUsersData","usersDataCopied"],"mappings":"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","sourcesContent":["const helperMethods = {\r\n  randomParagraphSelector: (list) => {\r\n    return list[Math.floor(Math.random() * list.length)];\r\n  },\r\n\r\n  paragraphSlicer: (paragraph, SLICER_INDEX) => {\r\n    return [\r\n      paragraph.slice(SLICER_INDEX, SLICER_INDEX + 46),\r\n      SLICER_INDEX + 46,\r\n    ];\r\n  },\r\n\r\n  wordMatchChecker: (firstWord, secondWord) => {\r\n    if (firstWord)\r\n      return (\r\n        firstWord.props.children[0].replace(/\\s+/g, \"\") ===\r\n        secondWord.replace(/\\s+/g, \"\")\r\n      );\r\n\r\n    return false;\r\n  },\r\n\r\n  paragraphArraySetter: (cb_setter, cb_selector, texts) => {\r\n    cb_setter(\r\n      cb_selector(texts)\r\n        .split(\" \")\r\n        .map((word, index) => {\r\n          return (\r\n            <span key={index}>\r\n              {word} {\"\"}\r\n            </span>\r\n          );\r\n        })\r\n    );\r\n  },\r\n\r\n  dataBuilder: ({\r\n    user,\r\n    TIMER_STARTED_BOOLEAN,\r\n    setTIMER_STARTED_BOOLEAN,\r\n    setUSER_STAT,\r\n    setCHAR_CODES_ARRAY,\r\n    setMOMENTS_ARRAY,\r\n    setCHART_IS_OPEN,\r\n    setTIMER_TRACKER_BOOLEAN\r\n  }) => {\r\n\r\n    if(TIMER_STARTED_BOOLEAN) setTIMER_TRACKER_BOOLEAN(true);\r\n    setTIMER_STARTED_BOOLEAN(false);\r\n\r\n    let sumOfAccuracy = 0,\r\n      avgAccuracy,\r\n      sumOfCorrect = 0,\r\n      avgCorrect,\r\n      sumOfKeyStrokes = 0,\r\n      avgKeystrokes,\r\n      sumOfWpm = 0,\r\n      avgWpm,\r\n      sumOfMisspelled = 0,\r\n      avgMisspelled,\r\n      arrayOfCharCodes = [],\r\n      arrayOfAllCharCodes = [],\r\n      avgMomentsArrayOfAllCharCodes = [],\r\n      uniqueCharCodeArray = [],\r\n      momentsArr = [],\r\n      charCodesArr = [];\r\n\r\n    user.userdata.map((datam) => {\r\n      sumOfAccuracy += datam.ACCURACY;\r\n      sumOfCorrect += datam.CORRECT;\r\n      sumOfKeyStrokes += datam.KEY_STROKES;\r\n      sumOfWpm += datam.WPM;\r\n      sumOfMisspelled += datam.MISSPELLED;\r\n      arrayOfCharCodes = [...arrayOfCharCodes, datam.CHAR_CODES];\r\n    });\r\n\r\n    avgAccuracy = sumOfAccuracy / user.userdata.length;\r\n    avgCorrect = sumOfCorrect / user.userdata.length;\r\n    avgMisspelled = sumOfMisspelled / user.userdata.length;\r\n    avgKeystrokes = sumOfKeyStrokes / user.userdata.length;\r\n    avgWpm = sumOfWpm / user.userdata.length;\r\n\r\n    setUSER_STAT({\r\n      avgKeystrokes,\r\n      avgCorrect,\r\n      avgWpm,\r\n      avgMisspelled,\r\n      avgAccuracy,\r\n    });\r\n\r\n    console.log(arrayOfCharCodes);\r\n\r\n    arrayOfCharCodes.map((arr) => {\r\n      arr.map((momentObj) => {\r\n        arrayOfAllCharCodes.push(momentObj);\r\n      });\r\n    });\r\n\r\n    arrayOfAllCharCodes.map((momentObj) => {\r\n      uniqueCharCodeArray.push(momentObj.charCode);\r\n    });\r\n\r\n    uniqueCharCodeArray = [...new Set(uniqueCharCodeArray)];\r\n\r\n    uniqueCharCodeArray.map((charCode) => {\r\n      let sumOfMoments = 0,\r\n        charCounts = 0;\r\n\r\n      arrayOfAllCharCodes.map((momentObj) => {\r\n        if (charCode === momentObj.charCode) {\r\n          charCounts++;\r\n          sumOfMoments += momentObj.moment;\r\n        }\r\n      });\r\n\r\n      avgMomentsArrayOfAllCharCodes.push({\r\n        charCode: charCode,\r\n        avgMoment: Math.ceil(sumOfMoments / charCounts),\r\n      });\r\n    });\r\n\r\n    avgMomentsArrayOfAllCharCodes.sort((a, b) => {\r\n      return a.charCode - b.charCode;\r\n    });\r\n\r\n    avgMomentsArrayOfAllCharCodes.map((momentObj) => {\r\n      momentsArr.push(momentObj.avgMoment);\r\n      if (momentObj.charCode === 32) {\r\n        charCodesArr.push(\"space\");\r\n      } else {\r\n        charCodesArr.push(String.fromCharCode(momentObj.charCode));\r\n      }\r\n    });\r\n    setMOMENTS_ARRAY(momentsArr);\r\n    setCHAR_CODES_ARRAY(charCodesArr);\r\n    setCHART_IS_OPEN(true);\r\n  },\r\n\r\n  deleteUser: (user, cb_users) => {\r\n    let userPermission = prompt(\"To delete your statistics, type 'yes'.\");\r\n    if (userPermission === \"yes\") {\r\n      let prevUsersData = [...JSON.parse(localStorage.getItem(\"usersData\"))];\r\n      let newUsersData = [];\r\n      prevUsersData.map((userObj, index) => {\r\n        if (user.username === userObj.username) {\r\n          return;\r\n        }\r\n        newUsersData.push(userObj);\r\n      });\r\n      cb_users(newUsersData);\r\n      localStorage.setItem(\"usersData\", JSON.stringify(newUsersData));\r\n    }\r\n  },\r\n\r\n  keyPress: (\r\n    match_checker,\r\n    {\r\n      event,\r\n      CORRECT,\r\n      MISSPELLED,\r\n      CHAR_CODES,\r\n      SELECTED_WORD,\r\n      TYPING_WORD,\r\n      WORD_BOOLEANS,\r\n      PREV_MOMENT,\r\n      WORD_INDEX,\r\n      PARAGRAPH_ARRAY,\r\n      setWORD_INDEX,\r\n      ChallengeRestartButtonHandler,\r\n      setMISSPELLED,\r\n      setCORRECT,\r\n      setTYPING_WORD,\r\n      setWORD_BOOLEANS,\r\n      setACCURACY,\r\n      setSELECTED_WORD,\r\n      setKEY_STROKES,\r\n      setTIMER_STARTED_BOOLEAN,\r\n      setCHAR_CODES,\r\n      setPREV_MOMENT,\r\n    }\r\n  ) => {\r\n    setKEY_STROKES((prevStroke, currStroke) => {\r\n      return prevStroke + 1;\r\n    });\r\n\r\n    setTIMER_STARTED_BOOLEAN(true);\r\n\r\n    if (PREV_MOMENT > 1) {\r\n      setCHAR_CODES([\r\n        ...CHAR_CODES,\r\n        {\r\n          moment: new Date().getTime() - PREV_MOMENT,\r\n          charCode: event.charCode,\r\n        },\r\n      ]);\r\n      setPREV_MOMENT(0);\r\n    }\r\n\r\n    setPREV_MOMENT(new Date().getTime());\r\n\r\n    if (event.charCode === 32) {\r\n      setWORD_INDEX((prevIndex, currnetIndex) => prevIndex + 1);\r\n\r\n      setTIMER_STARTED_BOOLEAN(true);\r\n      setTYPING_WORD(\"\");\r\n      setSELECTED_WORD(PARAGRAPH_ARRAY[WORD_INDEX + 1]);\r\n\r\n      setACCURACY((prevAcc, nextAcc) => {\r\n        if (CORRECT > 0) {\r\n          let total = parseInt(MISSPELLED) + parseInt(CORRECT);\r\n\r\n          return Math.ceil((parseInt(CORRECT) / total) * 100);\r\n        } else return 0;\r\n      });\r\n\r\n      let matchingIssues = match_checker(SELECTED_WORD, TYPING_WORD);\r\n\r\n      setWORD_BOOLEANS([...WORD_BOOLEANS, matchingIssues]);\r\n\r\n      if (matchingIssues)\r\n        setCORRECT(\r\n          (prevCorrect, nextCorrect) => (nextCorrect = prevCorrect + 1)\r\n        );\r\n      else\r\n        setMISSPELLED((prevMisspelled, nextMisspelled) => {\r\n          return prevMisspelled + 1;\r\n        });\r\n\r\n      if (PARAGRAPH_ARRAY.length - 2 < WORD_INDEX)\r\n        ChallengeRestartButtonHandler();\r\n    }\r\n  },\r\n\r\n  characterMatch : ({event,SELECTED_WORD,setTYPING_WORD,setCHARACTER_BOOLEAN}) => {\r\n\r\n    setTYPING_WORD(event.target.value);\r\n    if (SELECTED_WORD) {\r\n      let char1 = SELECTED_WORD.props.children[0];\r\n      let char2 = event.target.value.replace(/\\s+/g, \"\");\r\n      if (char2 !== char1.substring(0, char2.length)) {\r\n        setCHARACTER_BOOLEAN(false);\r\n      } else {\r\n        setCHARACTER_BOOLEAN(true);\r\n      }\r\n    }\r\n  }, \r\n  \r\n\r\n  cardMaker : ({\r\n    setRESULT_CARD_BOOLEAN,\r\n    setUSERS_DATA,\r\n    CORRECT,\r\n    KEY_STROKES,\r\n    WPM,\r\n    ACCURACY,\r\n    MISSPELLED,\r\n    USER_NAME_FROM_INPUT,\r\n    setUSER_DATA,\r\n    CHAR_CODES,\r\n    USERS_DATA}) => {   \r\n    setRESULT_CARD_BOOLEAN(true);\r\n\r\n    let newUserBool = true;\r\n    let currentUsersData;\r\n    let usersDataCopied = [...USERS_DATA];\r\n\r\n    if (usersDataCopied.length > 0) {\r\n      currentUsersData = usersDataCopied.map((user, index) => {\r\n        if (user.username === USER_NAME_FROM_INPUT) {\r\n          newUserBool = false;\r\n          user.userdata.push({\r\n            CORRECT,\r\n            KEY_STROKES,\r\n            WPM,\r\n            ACCURACY,\r\n            MISSPELLED,\r\n            CHAR_CODES,\r\n          });\r\n          return user;\r\n        }\r\n        return user;\r\n      });\r\n      setUSERS_DATA(currentUsersData);\r\n    }\r\n\r\n    if (newUserBool) {\r\n      currentUsersData = [\r\n        ...usersDataCopied,\r\n        {\r\n          username: USER_NAME_FROM_INPUT,\r\n          userdata: [\r\n            {\r\n              CORRECT,\r\n              KEY_STROKES,\r\n              WPM,\r\n              ACCURACY,\r\n              MISSPELLED,\r\n              CHAR_CODES,\r\n            },\r\n          ],\r\n        },\r\n      ];\r\n\r\n      setUSERS_DATA(currentUsersData);\r\n    }\r\n\r\n    localStorage.setItem(\"usersData\", JSON.stringify(currentUsersData));\r\n\r\n    setUSER_DATA({\r\n      CORRECT,\r\n      KEY_STROKES,\r\n      WPM,\r\n      ACCURACY,\r\n      MISSPELLED,\r\n    });\r\n  }\r\n};\r\n\r\nexport default helperMethods;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}