{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anird\\\\Desktop\\\\phantomTyper\\\\phantomtyper_1.0\\\\src\\\\components\\\\TestContainer\\\\TypingChallenge\\\\ChallengeArea\\\\TypingParagraphTextaArea\\\\TypingParagraphTextArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, fragment } from \"react\";\nimport { useTransition, animated } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TypingParagraphTextArea = ({\n  MODAL_IS_OPEN,\n  ACTIVE_PARAGRAPH,\n  WORD_INDEX,\n  CHARACTER_BOOLEAN,\n  WORD_BOOLEANS,\n  CHALLENGE_AREA_BOOLEAN\n}) => {\n  _s();\n\n  const [apOnTextArea, setApOnTextArea] = useState(\"\");\n  const transitions = useTransition(MODAL_IS_OPEN, {\n    from: {\n      opacity: 0,\n      marginTop: -100,\n      minHeight: \"10px\"\n    },\n    enter: {\n      opacity: 1,\n      marginTop: 0,\n      minHeight: \"145px\"\n    },\n    delay: 400\n  });\n  useEffect(() => {\n    setApOnTextArea(ACTIVE_PARAGRAPH.map((word, index) => {\n      if (parseInt(word.key) === WORD_INDEX) {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: CHARACTER_BOOLEAN ? \"font-normal bg-green-400 bg-opacity-50 px-1 rounded-md\" : \"font-normal bg-red-600 bg-opacity-60 px-1 rounded-md\",\n          children: word\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: WORD_BOOLEANS[index] === false ? \"font-normal px-1 rounded-lg opacity-90  text-red-600\" : \"px-1 bg-transparent font-normal\",\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this);\n    }));\n  }, [ACTIVE_PARAGRAPH, WORD_INDEX, CHARACTER_BOOLEAN, WORD_BOOLEANS]);\n  return transitions((styles, MODAL_IS_OPEN) => {\n    return !MODAL_IS_OPEN && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8\",\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: styles,\n        className: \"w-full p-4 box-shadow text-2xl resize-none bg-gray-100 leading-normal\",\n        children: apOnTextArea.length > 1 ? apOnTextArea : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-5xl font-normal\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  });\n};\n\n_s(TypingParagraphTextArea, \"A6q/S4Zqsp7eDya7Ipj9Lwsdq9I=\", false, function () {\n  return [useTransition];\n});\n\n_c = TypingParagraphTextArea;\nexport default TypingParagraphTextArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingParagraphTextArea\");","map":{"version":3,"sources":["C:/Users/anird/Desktop/phantomTyper/phantomtyper_1.0/src/components/TestContainer/TypingChallenge/ChallengeArea/TypingParagraphTextaArea/TypingParagraphTextArea.js"],"names":["React","useState","useEffect","fragment","useTransition","animated","TypingParagraphTextArea","MODAL_IS_OPEN","ACTIVE_PARAGRAPH","WORD_INDEX","CHARACTER_BOOLEAN","WORD_BOOLEANS","CHALLENGE_AREA_BOOLEAN","apOnTextArea","setApOnTextArea","transitions","from","opacity","marginTop","minHeight","enter","delay","map","word","index","parseInt","key","styles","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAAQC,aAAR,EAAuBC,QAAvB,QAAuC,cAAvC;;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAC/BC,EAAAA,aAD+B;AAE/BC,EAAAA,gBAF+B;AAG/BC,EAAAA,UAH+B;AAI/BC,EAAAA,iBAJ+B;AAK/BC,EAAAA,aAL+B;AAM/BC,EAAAA;AAN+B,CAAD,KAO1B;AAAA;;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMc,WAAW,GAAGX,aAAa,CAACG,aAAD,EAAgB;AAC/CS,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,SAAS,EAAE,CAAC,GAA1B;AAA+BC,MAAAA,SAAS,EAAE;AAA1C,KADyC;AAE/CC,IAAAA,KAAK,EAAE;AAAEH,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,SAAS,EAAE,CAAzB;AAA4BC,MAAAA,SAAS,EAAE;AAAvC,KAFwC;AAG/CE,IAAAA,KAAK,EAAE;AAHwC,GAAhB,CAAjC;AAMAnB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,eAAe,CACbN,gBAAgB,CAACc,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,UAAIC,QAAQ,CAACF,IAAI,CAACG,GAAN,CAAR,KAAuBjB,UAA3B,EAAuC;AACrC,4BACE;AAEE,UAAA,SAAS,EACPC,iBAAiB,GACb,wDADa,GAEb,sDALR;AAAA,oBAQGa;AARH,WACOC,KADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD;;AACD,0BACE;AAEE,QAAA,SAAS,EACPb,aAAa,CAACa,KAAD,CAAb,KAAyB,KAAzB,GACI,sDADJ,GAEI,iCALR;AAAA,kBAQGD;AARH,SACOC,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KA3BD,CADa,CAAf;AA8BD,GA/BQ,EA+BN,CAAChB,gBAAD,EAAmBC,UAAnB,EAA+BC,iBAA/B,EAAkDC,aAAlD,CA/BM,CAAT;AAiCA,SAAOI,WAAW,CAAC,CAACY,MAAD,EAASpB,aAAT,KAA2B;AAC5C,WACE,CAACA,aAAD,iBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE,QAAC,QAAD,CAAU,GAAV;AACE,QAAA,KAAK,EAAEoB,MADT;AAEE,QAAA,SAAS,EAAC,uEAFZ;AAAA,kBAIGd,YAAY,CAACe,MAAb,GAAsB,CAAtB,GACCf,YADD,gBAGC;AAAA,iCACE;AAAI,YAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ;AAkBD,GAnBiB,CAAlB;AAoBD,CArED;;GAAMP,uB;UAUgBF,a;;;KAVhBE,uB;AAuEN,eAAeA,uBAAf","sourcesContent":["import React, { useState, useEffect, fragment } from \"react\";\r\nimport {useTransition, animated } from \"react-spring\";\r\n\r\nconst TypingParagraphTextArea = ({\r\n  MODAL_IS_OPEN,\r\n  ACTIVE_PARAGRAPH,\r\n  WORD_INDEX,\r\n  CHARACTER_BOOLEAN,\r\n  WORD_BOOLEANS,\r\n  CHALLENGE_AREA_BOOLEAN,\r\n}) => {\r\n  const [apOnTextArea, setApOnTextArea] = useState(\"\");\r\n\r\n  const transitions = useTransition(MODAL_IS_OPEN, {\r\n    from: { opacity: 0, marginTop: -100, minHeight: \"10px\" },\r\n    enter: { opacity: 1, marginTop: 0, minHeight: \"145px\" },\r\n    delay: 400,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setApOnTextArea(\r\n      ACTIVE_PARAGRAPH.map((word, index) => {\r\n        if (parseInt(word.key) === WORD_INDEX) {\r\n          return (\r\n            <span\r\n              key={index}\r\n              className={\r\n                CHARACTER_BOOLEAN\r\n                  ? \"font-normal bg-green-400 bg-opacity-50 px-1 rounded-md\"\r\n                  : \"font-normal bg-red-600 bg-opacity-60 px-1 rounded-md\"\r\n              }\r\n            >\r\n              {word}\r\n            </span>\r\n          );\r\n        }\r\n        return (\r\n          <span\r\n            key={index}\r\n            className={\r\n              WORD_BOOLEANS[index] === false\r\n                ? \"font-normal px-1 rounded-lg opacity-90  text-red-600\"\r\n                : \"px-1 bg-transparent font-normal\"\r\n            }\r\n          >\r\n            {word}\r\n          </span>\r\n        );\r\n      })\r\n    );\r\n  }, [ACTIVE_PARAGRAPH, WORD_INDEX, CHARACTER_BOOLEAN, WORD_BOOLEANS]);\r\n\r\n  return transitions((styles, MODAL_IS_OPEN) => {\r\n    return (\r\n      !MODAL_IS_OPEN && (\r\n        <div className=\"mt-8\">\r\n          <animated.div\r\n            style={styles}\r\n            className=\"w-full p-4 box-shadow text-2xl resize-none bg-gray-100 leading-normal\"\r\n          >\r\n            {apOnTextArea.length > 1 ? (\r\n              apOnTextArea\r\n            ) : (\r\n              <div>\r\n                <h1 className=\"text-5xl font-normal\">Loading...</h1>\r\n              </div>\r\n            )}\r\n          </animated.div>\r\n        </div>\r\n      )\r\n    );\r\n  });\r\n};\r\n\r\nexport default TypingParagraphTextArea;\r\n"]},"metadata":{},"sourceType":"module"}